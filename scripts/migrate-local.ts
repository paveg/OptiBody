#!/usr/bin/env tsx
import { execSync } from "child_process";
import { readdir } from "fs/promises";
import { join } from "path";

async function migrateLocal() {
  try {
    console.log("üöÄ Applying migrations to local D1 database...");
    
    // drizzle„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆSQL„Éï„Ç°„Ç§„É´„ÇíÂèñÂæó
    const drizzlePath = join(process.cwd(), "drizzle");
    
    try {
      const files = await readdir(drizzlePath);
      const sqlFiles = files
        .filter(file => file.endsWith('.sql'))
        .sort(); // „Éï„Ç°„Ç§„É´ÂêçÈ†Ü„Åß„ÇΩ„Éº„Éà
      
      if (sqlFiles.length === 0) {
        console.log("‚ö†Ô∏è  No migration files found. Run 'pnpm db:generate' first.");
        return;
      }
      
      console.log(`üìù Found ${sqlFiles.length} migration file(s):`);
      sqlFiles.forEach(file => console.log(`  - ${file}`));
      
      // ÂêÑ„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„Éï„Ç°„Ç§„É´„ÇíÈ†ÜÁï™„Å´ÂÆüË°å
      for (const file of sqlFiles) {
        const filePath = join(drizzlePath, file);
        console.log(`\nüîÑ Applying migration: ${file}`);
        
        try {
          execSync(
            `wrangler d1 execute DB --local --file "${filePath}"`,
            { stdio: "inherit" }
          );
          console.log(`‚úÖ Applied: ${file}`);
        } catch (error) {
          console.error(`‚ùå Failed to apply ${file}:`, error);
          throw error;
        }
      }
      
      console.log("\nüéâ All migrations applied successfully!");
      
      // „ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß„ÇíË°®Á§∫
      console.log("\nüìã Current tables:");
      const result = execSync(
        `wrangler d1 execute DB --local --command "SELECT name FROM sqlite_master WHERE type='table';" --json`,
        { encoding: "utf-8" }
      );
      
      const tables = JSON.parse(result);
      if (tables[0]?.results) {
        tables[0].results.forEach((table: any) => {
          console.log(`  - ${table.name}`);
        });
      }
      
    } catch (error) {
      console.error("‚ùå Error reading migration files:", error);
      throw error;
    }
    
  } catch (error) {
    console.error("‚ùå Migration failed:", error);
    process.exit(1);
  }
}

migrateLocal();